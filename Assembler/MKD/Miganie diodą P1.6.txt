main.c

#include "main.h"

//Definicja symbolu umozliwiajacego wykorzystanie zaimplementowanych w asemblerze przykladowych procedur
//#define ASM_EXAMPLE
unsigned char xdata PTAC _at_ 0x8000;
unsigned char xdata POT0 _at_ 0x8005;
unsigned char xdata POT1 _at_ 0x8006;
unsigned char xdata POT2 _at_ 0x8007;
unsigned char xdata PTSEG  _at_ 0x8018;
unsigned char xdata PTWE _at_ 0x8008;
unsigned char xdata PTWY _at_ 0x8008; // Deklaracja i definicja rejestru portu sterujacego diodami L0-L7
unsigned char xdata LCDBUF[32];				// Deklaracja i definicja bufora pomocniczego łańcucha tekstowego wyświetlacza LCD 2x16 znakow
unsigned char Pomiar;						// Deklaracja i definicja 8-mio bitowego licznika binarnego
unsigned int Napiecie;
//Deklaracje zmiennych pomocniczych
unsigned char  presc=0; // Licznik preskalera czestotliwosci wywolywania podalgorytmu w przerwaniu
unsigned char Modul7Seg=0; // Licznik kontrolujacy multipleksowanie wyswietlaczy 7-seg
bit flag=0;	// Flaga synchornizacji programu glownego z przerwaniem czasowym
unsigned char liczba[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
unsigned int POMIARY[4] = {0,0,0,0};
//Procedura opóźnienia czasowego o czasie równym 10*wait mikrosekund. 
void WAIT_10US(unsigned int wait){
#ifdef ASM_EXAMPLE
	WAIT_10US_ASM(-wait);			// Wywołanie procedury implementującej w asemblerze opóźnienie równe 10*wait mikrosekund. 
#else
	wait=(wait*10UL)/11UL;
	while(--wait) _nop_();			// Minimalnie 11 cykli (maksymalnie 12 cykli) maszynowych (mikrosekund) na iteracje pętli przy kompilacji C51v.9.60.7.0 z maksymalną optymalizacją
#endif
}

 




void main(void) {
			while(1) {
    TOGGLE_L8_DELAY(1000); // np. 10000*10us = 100ms (zależnie od Twojej wersji WAIT_10US_ASM)
}	
	}


--------------------------------------------------------
main.h

#include <intrins.h>
#include <reg52.h>
#include <intrins.h>
#include "lcd.h"
#include "mkd51sim.h"
#include <string.h>

void WAIT_10US_ASM(unsigned int negative_wait);
void WAIT_10US(unsigned int wait);
void INWERSJAP1_6_ASM(void);
void INWERSJAP1_6(void);
unsigned char PomiarADC();
unsigned long int ADCtoVoltage(unsigned char a_Pomiar);
void KonwersjaDoLCDBUF(unsigned long int a_Napiecie,unsigned char xdata *a_LCDBUF);
unsigned int LicznikModuloN(unsigned int a_Napiecie);
void STERUJ_DIODY_X0_X5(void);
void TOGGLE_L8_DELAY(unsigned int delay);

---------------------------------------------------------
assembly.a51

;Oznaczenie pamieci
;BIT, CODE, DATA, IDATA, XDATA, NUMBER

;Wejscie
;Arg Number               char, 1-byte ptr       int, 2-byte ptr                long, float                         generic ptr
;    1                          R7                   R6 & R7                       R4—R7                              R1—R3
;                                             (MSB in R6,LSB in R7)           (MSB in R4,LSB in R7)      (Mem type in R3, MSB in R2, LSB in R1)
;    2                          R5                   R4 & R5                       R4—R7                              R1—R3
;                                             (MSB in R4,LSB in R5)           (MSB in R4,LSB in R7)      (Mem type in R3, MSB in R2, LSB in R1)
;    3                          R3                   R2 & R3                     ----------                           R1—R3
;                                             (MSB in R2,LSB in R3)                                      (Mem type in R3, MSB in R2, LSB in R1)

;Wyjscie
;bit                                 - Carry bit
;char, unsigned char, 1-byte pointer - R7 
;int, unsigned int, 2-byte ptr       - R6 & R7 MSB in R6, LSB in R7. 
;long,  unsigned long                - R4-R7 MSB in R4, LSB in R7. 
;float R4-R7                         - 32-Bit IEEE format. 
;generic pointer                     - R1-R3 Memory type in R3, MSB R2, LSB R1. 

;Upublicznie (udostepnienie na zewnatrz) symbolu zwiazanego z procedura/funkcja (jesli przyjmuje argumenty wejsciowe, to wymaga uzupelnienia symbolu dodatkowym znakiem "podlogi")
		PUBLIC  _WAIT_10US_ASM
		PUBLIC  INWERSJAP1_6_ASM
		
;Zdefiniowanie segmentu kodu wynikowego 				
PRGSEG  SEGMENT CODE
		RSEG    PRGSEG
;Definicja procedury realizujacej opoznienie czasowe bedace dopelnieniem do wartosci maksymalnej 16-bitowej
_WAIT_10US_ASM:
; Odebranie argumentu wejsciowego podanego przy wywolaniu procedury
		MOV DPL,R7   ;Umieszcza mlodszy bajty argumentu wejsciowego w mlodszym bajcie rejestru DPTR (DPL)
		MOV DPH,R6   ;Umieszcza starszy bajt argumentu wejsciowego w starszym bajcie rejestru DPTR (DPH)
;Petla opozniajaca wykorzystujaca wartosc rejestru DPTR jako zmienna iteracyjna			
WAIT_U:
; czterokrotne wykonanie instrukcji NOP, implementujce opoznienie 4us w celu zapewnienia opoznienia rownego 10us dla jednej iteracji petli
		NOP
		NOP
		NOP
		NOP
;Zwiekszenie DPTR o jeden
		INC DPTR
;Przeslanie do akumulatora starszego bajtu DPTR-a
		MOV A,DPH
;Wykonanie sumy logicznej miedzy akumulatorenm a mlodszym bajtem DPTR w celu przygotwania akumulatora do sprawdzenia czy rejestr DPTR ulegl wyzerowaniu
		ORL A,DPL
;Sprawdzenie niezerowego stanu rejestru DPTR poprzez weryfikacje stanu akumulatora ustalonego poprzednia instrukcja sumy logicznej
;Wykonanie skoku do kolejnej iteracji petli jesli akumulator jest rozny od zera (oparciu o powyzsze instrukcji rowniez jesli DPTR jest rozny od zera)
		JNZ WAIT_U
;Powrot z procedury		
		RET
;Etykieta rozpoczynajaca procedure INWERSJAP1_6_A
INWERSJAP1_6_ASM:
; Inwersja bitu 6 portu P1, ktory steruje dioda L8
	CPL P1.6 
;Powrot z procdury (podprogramu) - skok bezwarunkowy pod adres zapisany na stosie
	RET

; Procedura kopiujaca stany przycisków X0..X5 na diody L0..L5
; PTWE - rejestr wejsciowy (przyciski), adres 0x8008
; PTWY - rejestr wyjsciowy (diody), adres 0x8008

----------------------------------------------------
TUTAJ DODAŁEM

	PUBLIC STERUJ_DIODY_X0_X5

SEGMENT_CODE SEGMENT CODE
	RSEG SEGMENT_CODE

STERUJ_DIODY_X0_X5:
	; Odczytaj stan przycisków X0-X5
	MOV DPTR, #0x8008     ; Adres PTWE/PTWY
	MOVX A, @DPTR         ; Odczytaj bajt z PTWE

	; Zamaskuj tylko bity 0-5 (pozostale wyzeruj)
	ANL A, #00111111b     ; Zostaw tylko bity 0-5
	; Wpisz stan na diody L0-L5 (PTWY)
	CPL A 				  ; Odwrócenie logiki (przycisk wcisniety==LED ON)
	MOVX @DPTR, A         ; Zapisz do PTWY (adres ten sam)
	
	RET

; Procedura: Zmien stan diody L8 (P1.6), poczekaj zadany czas
; Argument: delay (unsigned int) w R6 (MSB) i R7 (LSB)

        PUBLIC  _TOGGLE_L8_DELAY
        

CODESEG SEGMENT CODE
        RSEG CODESEG

_TOGGLE_L8_DELAY:
        CPL P1.6

        MOV  A, R7
        MOV  DPL, A
        MOV  A, R6
        MOV  DPH, A
        LCALL _WAIT_10US_ASM

        RET

        END

;Dyrektywa asemblera konczaca kod zrodlowy
	END
